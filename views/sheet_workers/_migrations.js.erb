/**
 * Runs all migrations that are equal to or later than the given version
 *
 * `version` must be a semantic version (ie. "1.5.1") that exists on the `MIGRATIONS` object
 */
var runMigrations = function(version) {
  console.log(`[DCC_Tabbed_Sheet-Migrations] Checking if new migrations need to be run. Char sheet current version: ${version}, new version: ${VERSION}`);
  var foundNewMigration = false;
  _.each(MIGRATIONS, function(migrationRow) {
    var key = _.first(_.keys(migrationRow));
    if (compareVersionNumbers(version, key) < 0) {
      //Found new migration, need to run all migrations on this row
      foundNewMigration = true;
      console.log(`[DCC_Tabbed_Sheet-Migrations] New migrations found for ${key}, running them now...`);
    }
    if (foundNewMigration) {
      _.each(migrationRow[key], function(migration) {
        console.log(`[DCC_Tabbed_Sheet-Migrations] Running ${migration.name}...`);
        migration();
        console.log(`[DCC_Tabbed_Sheet-Migrations] ${migration.name} done.`);
      });
    }
  });
  if (foundNewMigration) {
    console.log("[DCC_Tabbed_Sheet-Migrations] Finished. Char sheet is up to date.");
  } else {
    console.log("[DCC_Tabbed_Sheet-Migrations] Finished. No new migrations.");
  }
};

/**
 * Copies the old zero level weapon data to normal weapon data rows
 */
var migrateZeroLevelWeapons = function migrateZeroLevelWeapons() {
  getAttrs(["Level"], function(values) {
    if (values.Level !== "0") {
      // We assume that anyone leveled to 1 has copied their 0-level weapons already
      return;
    }
    var l0Tol1Map = {
      "zeroWeaponLuckyRoll": "zeroWeaponLuckyRoll",
      "meleeWeaponNameZero": "meleeWeaponName",
      "meleeAttackDiceZero": "meleeAttackDice",
      "meleeAttackWieldedZero": "meleeAttackWielded",
      "meleeCritThreatZero": "meleeCritThreat",
      "meleeMagicZero": "meleeMagic",
      "meleeDmgZero": "meleeDmg",
      "zeroRangedWeaponLuckyRollZero": "zeroRangedWeaponLuckyRoll",
      "rangedAmmoZero": "rangedAmmo",
      "rangedWeaponNameZero": "rangedWeaponName",
      "rangedDistanceShortZero": "rangedDistanceShort",
      "rangedDistanceMedZero": "rangedDistanceMed",
      "rangedDistanceLongZero": "rangedDistanceLong",
      "rangedWeaponTypeZero": "rangedWeaponType",
      "rangedAttackDiceZero": "rangedAttackDice",
      "rangedDmgZero": "rangedDmg",
      "rangedCritThreatZero": "rangedCritThreat",
      "rangedMagicZero": "rangedMagic",
      "attackRangeZero": "attackRange"
    };
    var migrate = function(repeatingKey) {
      TAS
        .repeating(`${repeatingKey}zero`)
        .fields(_.keys(l0Tol1Map))
        .each(function(row, attrSet, id, rowSet) {
          var newRecord = {};
          var newId = generateRowID();
          var prefix = `repeating_${repeatingKey}_${newId}_`;
          _.each(l0Tol1Map, function(keyL1, keyL0) {
            var value = row[keyL0];
            if (value) {
              // Hack necessary due to case sensitive difference in values (luckstartingMod vs luckStartingMod)
              if (keyL0 === "zeroRangedWeaponLuckyRollZero" && value === "@{luckstartingMod}") {
                value = "@{luckStartingMod}";
              }
              newRecord[`${prefix}${keyL1}`] = value;
            }
          });
          setAttrs(newRecord, function() {
            removeRepeatingRow(`repeating_${repeatingKey}zero_${id}`);
          });
        })
        .execute();
    };
    migrate("meleeweapon");
    migrate("rangedweapon");
  });
};

var migrateLuckyRollValues = function migrateLuckyRollValues() {
  var attrsWithValuesRemapped = [
    "findSecretDoorsLuckyRoll",
    "spellCastLuckyRoll",
    "critLuckyRoll",
    "corruptionLuckyRoll",
    "fumbleLuckyRoll",
    "speedLuckyRoll",
    "armorClassLuckyRoll"
  ];
  getAttrs(attrsWithValuesRemapped, function(attrs) {
    var newValues = _.reduce(attrsWithValuesRemapped, function(memo, attr_name) {
      if (isNaN(parseInt(attrs[attr_name]))) {
        memo[attr_name] = "[[@{luckStartingMod}]]";
      }
      return memo;
    }, {});
    setAttrs(newValues);
  });
};

var MIGRATIONS = [
  { "1.5.0": [] },
  { "1.5.1": [recalculateAllRangedModifiers, migrateZeroLevelWeapons] },
  { "1.5.2": [] },
  { "1.6.0": [migrateLuckyRollValues] }
];
